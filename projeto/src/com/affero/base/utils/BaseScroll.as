package com.affero.base.utils{	import com.greensock.*;	import flash.display.*;	import flash.events.*;	import flash.geom.Rectangle;	import flash.utils.Timer;	/**	 * ...	 * @author Luiz	 */	public class BaseScroll extends MovieClip {		private var delaySpeed : uint = 7;		private var wheelSpeed : uint = 10;		private var distanciaScroll : Number = 0;		private var mcStage : Stage;		private var scrollMc : MovieClip;		private var conteudoMask : MovieClip;		private var hitMc : MovieClip;		private var conteudoDisplayMc : MovieClip;		private var container:MovieClip;		private var trackAreaMc : MovieClip;		private var draggerMc : MovieClip;		private var scrollPercent : Number = new Number(0);		private var remainingH : Number = 0;		private var scrollTimer : Timer;		private var mouseDown : Boolean;		private var newY : Number = 0;		private var nextY : Number = 0;		private var maxYdrag : Number;		private var newRect : Rectangle;		private var DraggerHdefault : Number;		private var scrollerRelativo : Boolean;		private var scrollPadding : Number;		private var tweenMax : TweenMax;		private var inicioApp : Boolean = true;				public function BaseScroll(mc_load : MovieClip, conteudoDisplay : MovieClip, trackArea : MovieClip, dragger : MovieClip, parametros : Object = null, inStage : Stage = null) : void {						container = mc_load;						trackArea.x=0;			trackArea.y=0;			dragger.x=0;			dragger.y=0;			// Validando Parametros do objeto			if (parametros != null) {				// VALIDANDO PARAMETROS				if (parametros.delay != undefined && delaySpeed > 0) {					delaySpeed = parametros.delay;				}				if (parametros.wheelSpeed != undefined) {					wheelSpeed = parametros.wheelSpeed;				}				if (parametros.distancia != undefined) {					distanciaScroll = parametros.distancia;				}				if (parametros.relativo != undefined) {					scrollerRelativo = parametros.relativo;				}								if (parametros.scrollPadding != undefined) {					scrollPadding = parametros.scrollPadding;				}else{					scrollPadding = 0;				}			}			// Criando Timer que para o efeito de easing			scrollTimer = new Timer(delaySpeed / 4 * 1000, 1);			// ALTURA PADRÃO DO DRAGGER			DraggerHdefault = dragger.height;			if (inStage) {				mcStage = inStage;			} else {				mcStage = mc_load.stage;			}			conteudoDisplayMc = conteudoDisplay;			trackAreaMc = trackArea;			draggerMc = dragger;			// Criando hit Area			hitMc = new MovieClip();			hitMc.graphics.beginFill(0x000000);			hitMc.graphics.drawRoundRect(0, 0, container.width + distanciaScroll, trackArea.height, 0);			hitMc.alpha = 0;			// Cria MovieClip do Scroll			scrollMc = new MovieClip();			scrollMc.addChild(hitMc);			scrollMc.addChild(conteudoDisplay);			scrollMc.addChild(trackArea);			scrollMc.addChild(dragger);			// Criando Mascara			conteudoMask = new MovieClip();			conteudoMask.graphics.beginFill(0x000000);			conteudoMask.graphics.drawRoundRect(0, 0, conteudoDisplay.width + distanciaScroll, trackArea.height, 0);			scrollMc.addChild(conteudoMask);			conteudoDisplay.mask = conteudoMask;									setResize();						//Posição do Scroll			if (container.width > 0) {				draggerMc.x =   Math.round( container.width + distanciaScroll);				trackAreaMc.x =  Math.round( container.width + distanciaScroll);			}else {				draggerMc.x =   Math.round( conteudoDisplay.width + distanciaScroll);				trackAreaMc.x =  Math.round( conteudoDisplay.width + distanciaScroll);			}									maxYdrag = Math.floor(trackAreaMc.height - draggerMc.height);			mc_load.addChild(scrollMc);					}				/* MOUSE EVENTS */		private function trackMove(e : MouseEvent):void {			// trace(e.target);			// && draggerMc.dropTarget.name == null			if (scrollTimer.hasEventListener(TimerEvent.TIMER) && e.target == draggerMc) {				scrollTimer.stop();				scrollTimer.removeEventListener(TimerEvent.TIMER, timerUp);			}		}		// END TRACK MOVE		private function moveScroll(e : MouseEvent) : void {			var numY : Number;			maxYdrag = Math.floor(trackAreaMc.height - draggerMc.height);									if (e.delta > 0 && draggerMc.y > 0) {				numY = draggerMc.y - wheelSpeed;				if (numY > 0) {					tweenMax = new TweenMax(draggerMc, 0.5, {y:numY});				} else {					tweenMax = new TweenMax(draggerMc, 0.5, {y:0});				}											} else if (e.delta < 0) {								numY = draggerMc.y + wheelSpeed;									if (numY < maxYdrag) {					tweenMax = new TweenMax(draggerMc, 0.5, {y:numY});									} else {										tweenMax = new TweenMax(draggerMc, 0.5, {y:maxYdrag});									}											}			mouseDown = true;			addEventListener(Event.ENTER_FRAME, moveContent);		}		// END MOVE SCROLL		private function moveDrag(e : MouseEvent) : void {			mouseDown = true;			newRect = new Rectangle(trackAreaMc.x, trackAreaMc.y, 0, trackAreaMc.height - draggerMc.height);						draggerMc.startDrag(false, newRect);			addEventListener(Event.ENTER_FRAME, moveContent);		}		// END DRAG MOVE		private function releaseDrag(e : MouseEvent) : void {			draggerMc.stopDrag();		}		// END RELEASE DRAG		// TIMER EVENT		private function timerUp(evt : TimerEvent) : void {			// trace("stop()...");			mouseDown = false;			removeEventListener(Event.ENTER_FRAME, moveContent);			if (draggerMc.hasEventListener(MouseEvent.MOUSE_DOWN)) {				draggerMc.stopDrag()			}			;		}		// END TIMER UP		// MOVENDO O CONTEÚDO		private function moveContent(e : Event) : void {			// trace("...start()");			if (mouseDown) {				scrollPercent = ( 100 / ( trackAreaMc.height - draggerMc.height ) ) * ( draggerMc.y - trackAreaMc.y);				newY = (remainingH / 100) * scrollPercent;				nextY = conteudoDisplayMc.y + ((-newY) - conteudoDisplayMc.y) / delaySpeed;				conteudoDisplayMc.y = Math.min(nextY);				if (draggerMc.y > 0) {					remainingH = conteudoDisplayMc.height - conteudoMask.height + 10;				} else {					remainingH = conteudoDisplayMc.height - conteudoMask.height;				}				if (Math.round(conteudoDisplayMc.y) == Math.round(nextY)) {					scrollTimer.start();					scrollTimer.addEventListener(TimerEvent.TIMER, timerUp);				}							}							}		// END MOVE CONTENT		public function setResize() : void {								// Ajusta a área de scroll em relação ao conteúdo			var tamanhoDrager : Number = Math.ceil((trackAreaMc.height / conteudoDisplayMc.height) * trackAreaMc.height);			maxYdrag = Math.floor(trackAreaMc.height - draggerMc.height);						if (Math.round(conteudoDisplayMc.height) <= Math.round(trackAreaMc.height) && scrollerRelativo == true) {								//trace('conteudo menor que o scroll');				draggerMc.height = trackAreaMc.height;				conteudoDisplayMc.y = 0;				draggerMc.y = 0;								tweenMax = new TweenMax(draggerMc, 0.5, {alpha:0});				tweenMax = new TweenMax(trackAreaMc, 0.5, {alpha:0, onComplete:scrollFalseVisible});				removeEventsBts();							}			else if (Math.round(conteudoDisplayMc.height) <= Math.round(trackAreaMc.height) && scrollerRelativo == false) {								//tracetrace('conteudo menor que o scroll');				draggerMc.height = DraggerHdefault;				conteudoDisplayMc.y = 0;				draggerMc.y = 0;								tweenMax = new TweenMax(draggerMc, 0.5, {alpha:0});				tweenMax = new TweenMax(trackAreaMc, 0.5, {alpha:0, onComplete:scrollFalseVisible});				removeEventsBts();							}					else if (tamanhoDrager < DraggerHdefault || scrollerRelativo == false) {								draggerMc.height = DraggerHdefault;				adicionaEventsBts();								//trace('conteudo maior que o scroll');				tweenMax = new TweenMax(draggerMc, 0.5, {alpha:1});				tweenMax = new TweenMax(trackAreaMc, 0.5, { alpha:1, onComplete:scrollTrueVisible } );							}else if (tamanhoDrager < DraggerHdefault || scrollerRelativo == true) {								draggerMc.height = tamanhoDrager ;				adicionaEventsBts();								//trace('conteudo maior que o scroll');				tweenMax = new TweenMax(draggerMc, 0.5, {alpha:1});				tweenMax = new TweenMax(trackAreaMc, 0.5, { alpha:1, onComplete:scrollTrueVisible } );							}												if (draggerMc.y > (trackAreaMc.height - draggerMc.height)) {							//trace('error');					draggerMc.y = trackAreaMc.height - draggerMc.height;				//conteudoDisplayMc.y = conteudoMask.height - conteudoDisplayMc.height;									tweenMax = new TweenMax(conteudoDisplayMc, 0.5, { y:conteudoMask.height - conteudoDisplayMc.height } );				//tweenMax = new TweenMax(draggerMc, 0.5, { y:trackAreaMc.height - draggerMc.height} );			}			else if (draggerMc.y < 0) {								draggerMc.y = 0;			}								}// END SET SIZE				private function adicionaEventsBts() : void {			if (!draggerMc.hasEventListener(MouseEvent.MOUSE_DOWN)) {				draggerMc.addEventListener(MouseEvent.MOUSE_DOWN, moveDrag)			}			;			if (!scrollMc.hasEventListener(MouseEvent.MOUSE_MOVE)) {				scrollMc.addEventListener(MouseEvent.MOUSE_MOVE, trackMove)			}			;			if (!mcStage.hasEventListener(MouseEvent.MOUSE_UP)) {				mcStage.addEventListener(MouseEvent.MOUSE_UP, releaseDrag)			}			;			if (!scrollMc.hasEventListener(MouseEvent.MOUSE_WHEEL)) {				scrollMc.addEventListener(MouseEvent.MOUSE_WHEEL, moveScroll)			}			;		}		private function removeEventsBts() : void {			//Main.instance.debug("sun of the beach", [draggerMc, scrollMc, mcStage]);			if (draggerMc.hasEventListener(MouseEvent.MOUSE_DOWN)) {				draggerMc.removeEventListener(MouseEvent.MOUSE_DOWN, moveDrag)			}			;			if (scrollMc.hasEventListener(MouseEvent.MOUSE_MOVE)) {				scrollMc.removeEventListener(MouseEvent.MOUSE_MOVE, trackMove)			}			;			if (mcStage.hasEventListener(MouseEvent.MOUSE_UP)) {				mcStage.removeEventListener(MouseEvent.MOUSE_UP, releaseDrag)			}			;			if (scrollMc.hasEventListener(MouseEvent.MOUSE_WHEEL)) {				scrollMc.removeEventListener(MouseEvent.MOUSE_WHEEL, moveScroll)			}			;					}		private function scrollFalseVisible():void {			draggerMc.visible = false;			trackAreaMc.visible = false;		}				private function scrollTrueVisible():void {			draggerMc.visible = true;			trackAreaMc.visible = true;		}	}	// END CLASS}// END PACKAGE